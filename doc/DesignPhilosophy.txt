This project is not meant as a standalone desktop application. The main purpose
is to develop a RESTful game server. The design should allow for independent
development of clients that can speak the server's REST API over HTTP.

Specifically, a game is managed through an Atom feed of Events. Specific events
are POSTed to the feed to perform actions; if the event is accepted (based on
game rules), it is admitted to the feed and may trigger other events to be
added to the feed as well which will update the clients' game state.

The project is composed of two components: the game server and a sample client.

The server is a Web application in the sense that it communicates with its
clients over the HTTP protocol, but it should not be confused with a user
facing web application. The server will not emit any HTML. That said, the use
of the standardized Atom Publishing Protocol and a YAML syntax for the events
embedded in the Atom feed should allow for experimentation by client developers
via APP toolkits.

The server is backed by a SQLite3 database for persisting server state. The
server will contain a game engine which validates the creation and/or
modification of events against the game state.

The provided sample client demonstrates the manner in which a client can wrap
the server API and provide a user interface. This particular client is a user
facing web application, making use of Ajax techniques to provide a smooth user
experience.

It is important to note that this client is *not* intended to be an "official"
or "normative" client. It will no doubt become a de facto standard due to its
close development ties to the server, but the server API documentation is
authoritative. If you find the client making assumptions not documented in the
server API, it is as likely a bug as a lack of documentation; please file it as
a bug. If we determine the sample client is doing the correct thing, we still
need to add to the documentation.
